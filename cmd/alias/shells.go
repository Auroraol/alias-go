package alias

import (
	cmdlib "alias-go/cmd"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/spf13/cobra"
)

func InitAlias() {
	// 添加子命令
	cmdlib.RootCmd.AddCommand(initCmd)
}

var initCmd = &cobra.Command{
	Use:   "init [shell]",
	Short: "Initialize shell integration",
	Long:  `Generate shell-specific configuration for alias management.`,
	Args:  cobra.ExactArgs(1), //命令后面必须有且只有一个参数 //位置参数和自定义参数
	// 执行命令逻辑
	Run: func(cmd *cobra.Command, args []string) {
		shell := args[0]

		configPath := getConfigPath()
		config, err := LoadConfig(configPath)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Warning: Failed to load config: %v\n", err)
			config = &AliasConfig{Aliases: make(map[string]interface{})}
		}

		if err := GenerateShellInit(shell, config); err != nil {
			cmdlib.HandleError(err)
		}
	},
}

func getConfigPath() string {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		return ""
	}
	return filepath.Join(homeDir, ".config", "alias.toml")
}

// 执行别名命令
// generateShellInit generates the initialization script for the specified shell
func GenerateShellInit(shell string, config *AliasConfig) error {
	switch strings.ToLower(shell) {
	case "bash":
		return generateBashInit(config)
	case "zsh":
		return generateZshInit(config)
	case "fish":
		return generateFishInit(config)
	case "powershell", "pwsh":
		return generatePowerShellInit(config)
	default:
		return fmt.Errorf("unsupported shell: %s", shell)
	}
}

// generateBashInit generates Bash initialization script
func generateBashInit(config *AliasConfig) error {
	aliases := config.GetAllAliasesForShell("bash")

	fmt.Println("# Alias initialization for bash")
	fmt.Println("# Generated by als - do not edit manually")
	fmt.Println()

	// 设置别名
	for name, command := range aliases {
		fmt.Printf("alias %s='%s'\n", name, escapeSingleQuotes(command))
	}

	return nil
}

// generateZshInit generates Zsh initialization script
func generateZshInit(config *AliasConfig) error {
	aliases := config.GetAllAliasesForShell("zsh")

	fmt.Println("# Alias initialization for zsh")
	fmt.Println("# Generated by als - do not edit manually")
	fmt.Println()

	for name, command := range aliases {
		fmt.Printf("alias %s='%s'\n", name, escapeSingleQuotes(command))
	}

	return nil
}

// generateFishInit generates Fish initialization script
func generateFishInit(config *AliasConfig) error {
	aliases := config.GetAllAliasesForShell("fish")

	fmt.Println("# Alias initialization for fish")
	fmt.Println("# Generated by als - do not edit manually")
	fmt.Println()

	for name, command := range aliases {
		fmt.Printf("alias %s '%s'\n", name, escapeSingleQuotes(command))
	}

	return nil
}

// generatePowerShellInit generates PowerShell initialization script
func generatePowerShellInit(config *AliasConfig) error {
	aliases := config.GetAllAliasesForShell("powershell")

	fmt.Println("# Alias initialization for PowerShell")
	fmt.Println("# Generated by als - do not edit manually")
	fmt.Println()

	for name, command := range aliases {
		// PowerShell uses Set-Alias for simple commands or functions for complex ones
		if isSimpleCommand(command) {
			fmt.Printf("Set-Alias -Name %s -Value '%s'\n", name, escapeDoubleQuotes(command))
		} else {
			fmt.Printf("function %s { %s }\n", name, command)
		}
	}

	return nil
}

// escapeSingleQuotes escapes single quotes in a string for shell usage
func escapeSingleQuotes(s string) string {
	return strings.ReplaceAll(s, "'", "'\"'\"'")
}

// escapeDoubleQuotes escapes double quotes in a string
func escapeDoubleQuotes(s string) string {
	return strings.ReplaceAll(s, "\"", "\\\"")
}

// isSimpleCommand checks if a command is simple enough for PowerShell Set-Alias
func isSimpleCommand(command string) bool {
	// PowerShell Set-Alias only works with simple executable names
	// If it contains spaces, pipes, or other complex syntax, use a function instead
	return !strings.Contains(command, " ") && !strings.Contains(command, "|") &&
		!strings.Contains(command, "&") && !strings.Contains(command, ";")
}
